const mongoose = require('mongoose');
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const { create } = require('../models/User');

const handleErrors = (err)=>{
    var errors = {email : '', password: ''};
    console.log(err.message);
    // incorrect email
    if(err.message === 'incorrect email'){
        errors.email = 'Email is not Registered';
    }
    // incorrect password
    if(err.message === 'incorrect password'){
        errors.password = 'Password is incorrect';
    }


    // To check whether email is unique or not
    if(err.code === 11000){
        errors.email = 'This email already exist';
        return errors;
    }

    // Validate errors
    if(err.message.includes('user validation failed')){
        Object.values(err.errors).forEach(({properties}) =>{
            errors[properties.path] = properties.message;
        });
    }
    return errors;
};
// 3 days in seconds
const maxAge = 3 * 24 * 60 * 60;

const createToken = (id) =>{
    //Header: header are generated automatically by jwt
    //Payload: here id is generated by mongodb and it is a payload
    // SECRET:  jwt secret is a secret which is hashed which payload and header to create non hackable jwt
    return jwt.sign({id},'jwt secret',{ 
        expiresIn: maxAge
    });
};

const login_get = (req,res) =>{
    res.render('user/login',{title : 'Login'});
};

const signup_get = (req,res) =>{
    res.render('user/signup', {title : 'Signup'});
};

const login_post = async (req,res) =>{
    const {email, password} = req.body;
    try{
         const user = await User.login(email, password);
         const token = createToken(user._id);
         res.cookie('jwt', token,{
             // this will make sure that we can't change anything in this cookie from front-end
             httpOnly: true,
             // maxAge in millisec
             maxAge: maxAge * 1000
         });
         res.status(200).json({user : user._id});
    }
    catch(err){
        const errors = handleErrors(err);
        res.status(400).json({ errors });
    }
};

const signup_post = async (req,res) =>{
    const {email, password} = req.body;
    try{
        // using await because a promise is send so the code will wait till the promise is received
        const user = await User.create({ email, password});
        const token = createToken(user._id);
        res.cookie('jwt', token,{
            // this will make sure that we can't change anything in this cookie from front-end
            httpOnly: true,
            // maxAge in millisec
            maxAge: maxAge * 1000
        });
        res.status(201).json({user: user._id});
    }
    catch(err){
        const errors = handleErrors(err);
        res.status(400).json({errors});
    }
};

const logout_get = (req,res) =>{
    res.cookie('jwt','', {maxAge: 1});
    res.redirect('/');
};


module.exports = {
    login_get,
    signup_get,
    login_post,
    signup_post,
    logout_get
}